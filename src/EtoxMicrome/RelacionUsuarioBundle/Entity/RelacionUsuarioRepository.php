<?php

namespace EtoxMicrome\RelacionUsuarioBundle\Entity;

use Doctrine\ORM\EntityRepository;
use EtoxMicrome\RelacionUsuarioBundle\Entity\RelacionUsuario;

/**
 * RelacionUsuarioRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class RelacionUsuarioRepository extends EntityRepository
{
    public function getChangesByUser ($username)
    {
        $alert="llega aqui";
        /*$em = $this->getEntityManager();
        $consulta = $em->createQuery('
            SELECT ru, r
            FROM RelacionUsuarioBundle:RelacionUsuario ru, RelacionBundle:Relacion r
        ');
        //WHERE tr.tipo = :tipoRelacion
        //$consulta->setParameter('username', $username);
        $data=$consulta->getResult();
        ldd($data[0]->getRelacion()->getEvidenciaEntidadOrigen());
        return($data);
        */
        $em = $this->getEntityManager();
        $connection=$em->getConnection();
        $user_db = $connection->getUsername();
        $password = $connection->getPassword();
        $host = $connection->getHost();
        $database=$connection->getDatabase();

        $mysqli = new \mysqli($host, $user_db, $password, $database);



        /* check connection */

        if ($mysqli->connect_errno) {
            $alert="Connect failed: %s\n".$mysqli->connect_error;
            ldd($alert);
            exit();
        }
        $selectSQL="
            SELECT ru.created, ee1.evidencia_id, ee1.textminingName, tr.tipo, ee2.textminingName
            FROM RelacionUsuario AS ru, Relacion AS r, EvidenciaEntidad AS ee1, EvidenciaEntidad AS ee2, TipoRelacion AS tr, fos_user AS us
            WHERE ru.relacion_id = r.id
            AND r.evidenciaEntidadOrigen_id = ee1.id
            AND r.evidenciaEntidadDestino_id = ee2.id
            AND r.tipoRelacion_id = tr.id
            AND ru.user_id = us.id
            AND us.username = \"$username\"
            ";
        //ld($selectSQL);
        $arrayResults=array();
        /* Select queries return a resultset */
        if ($result = $mysqli->query($selectSQL)) {
            /* obtener array asociativo */
            while ($row = $result->fetch_row()) {
                $arrayAsociativoTmp=array();
                $date=$row[0];
                $arrayAsociativoTmp["date"]=$date;
                $idEvidencia=$row[1];
                $arrayAsociativoTmp["idEvidencia"]=$idEvidencia;
                $evidenciaEntidadOrigen=$row[2];
                $arrayAsociativoTmp["evidenciaEntidadOrigen"]=$evidenciaEntidadOrigen;
                $tipoRelacion=$row[3];
                $arrayAsociativoTmp["tipoRelacion"]=$tipoRelacion;
                $evidenciaEntidadDestino=$row[4];
                $arrayAsociativoTmp["evidenciaEntidadDestino"]=$evidenciaEntidadDestino;

                array_push($arrayResults, $arrayAsociativoTmp);

            }
            /* liberar el resultset */
            $result->free();
        }
        //ld($arrayResults);
        return($arrayResults);
    }

    public function getChangesByUserDates ($username, $startDate, $endDate)
    {
        $alert="llega aqui";
        //ld($username);
        //ld($startDate);
        //ld($endDate);
        $arrayStartDate=explode("-",$startDate);
        $startDate="$arrayStartDate[2]-$arrayStartDate[1]-$arrayStartDate[0]";
        $arrayEndDate=explode("-",$endDate);
        $endDate="$arrayEndDate[2]-$arrayEndDate[1]-$arrayEndDate[0]";
        //ld($startDate);
        //ld($endDate);
        //ld($endDateObject);
        $em = $this->getEntityManager();
        $connection=$em->getConnection();
        $user_db = $connection->getUsername();
        $password = $connection->getPassword();
        $host = $connection->getHost();
        $database=$connection->getDatabase();

        $mysqli = new \mysqli($host, $user_db, $password, $database);



        /* check connection */

        if ($mysqli->connect_errno) {
            $alert="Connect failed: %s\n".$mysqli->connect_error;
            ldd($alert);
            exit();
        }
        $selectSQL="
            SELECT ru.created, ee1.evidencia_id, ee1.textminingName, tr.tipo, ee2.textminingName
            FROM RelacionUsuario AS ru, Relacion AS r, EvidenciaEntidad AS ee1, EvidenciaEntidad AS ee2, TipoRelacion AS tr, fos_user AS us
            WHERE ru.relacion_id = r.id
            AND r.evidenciaEntidadOrigen_id = ee1.id
            AND r.evidenciaEntidadDestino_id = ee2.id
            AND r.tipoRelacion_id = tr.id
            AND ru.user_id = us.id
            AND us.username = \"$username\"
            AND ru.created BETWEEN \"$startDate\" AND \"$endDate\"
            ORDER BY ru.created
            ";
        //ld($selectSQL);
        $arrayResults=array();
        /* Select queries return a resultset */
        if ($result = $mysqli->query($selectSQL)) {
            /* obtener array asociativo */
            while ($row = $result->fetch_row()) {
                $arrayAsociativoTmp=array();
                $date=$row[0];
                $arrayAsociativoTmp["date"]=$date;
                $idEvidencia=$row[1];
                $arrayAsociativoTmp["idEvidencia"]=$idEvidencia;
                $evidenciaEntidadOrigen=$row[2];
                $arrayAsociativoTmp["evidenciaEntidadOrigen"]=$evidenciaEntidadOrigen;
                $tipoRelacion=$row[3];
                $arrayAsociativoTmp["tipoRelacion"]=$tipoRelacion;
                $evidenciaEntidadDestino=$row[4];
                $arrayAsociativoTmp["evidenciaEntidadDestino"]=$evidenciaEntidadDestino;

                array_push($arrayResults, $arrayAsociativoTmp);

            }
            /* liberar el resultset */
            $result->free();
        }
        //ldd($arrayResults);
        return($arrayResults);
    }

    public function getChangesByEntity ($entity)
    {
        $alert="llega aqui";
        //ld($entity);
        /*$em = $this->getEntityManager();
        $consulta = $em->createQuery('
            SELECT ru, r
            FROM RelacionUsuarioBundle:RelacionUsuario ru, RelacionBundle:Relacion r
        ');
        //WHERE tr.tipo = :tipoRelacion
        //$consulta->setParameter('username', $username);
        $data=$consulta->getResult();
        ldd($data[0]->getRelacion()->getEvidenciaEntidadOrigen());
        return($data);
        */
        $em = $this->getEntityManager();
        $connection=$em->getConnection();
        $user_db = $connection->getUsername();
        $password = $connection->getPassword();
        $host = $connection->getHost();
        $database=$connection->getDatabase();

        $mysqli = new \mysqli($host, $user_db, $password, $database);



        /* check connection */

        if ($mysqli->connect_errno) {
            $alert="Connect failed: %s\n".$mysqli->connect_error;
            ldd($alert);
            exit();
        }
        $selectSQL="
            SELECT ru.id, ru.created, ee1.evidencia_id, ee1.textminingName, tr.tipo, ee2.textminingName, us.username
            FROM RelacionUsuario AS ru, Relacion AS r, EvidenciaEntidad AS ee1, EvidenciaEntidad AS ee2, TipoRelacion AS tr, fos_user AS us
            WHERE ru.relacion_id = r.id
            AND r.evidenciaEntidadOrigen_id = ee1.id
            AND r.evidenciaEntidadDestino_id = ee2.id
            AND r.tipoRelacion_id = tr.id
            AND ru.user_id = us.id
            AND ee1.textminingName = \"$entity\"
            ";
        //ld($selectSQL);
        $arrayResults=array();
        /* Select queries return a resultset */
        if ($result = $mysqli->query($selectSQL)) {
            /* obtener array asociativo */
            while ($row = $result->fetch_row()) {
                $id=$row[0];
                $arrayAsociativoTmp=array();
                $date=$row[1];
                $arrayAsociativoTmp["date"]=$date;
                $idEvidencia=$row[2];
                $arrayAsociativoTmp["idEvidencia"]=$idEvidencia;
                $evidenciaEntidadOrigen=$row[3];
                $arrayAsociativoTmp["evidenciaEntidadOrigen"]=$evidenciaEntidadOrigen;
                $tipoRelacion=$row[4];
                $arrayAsociativoTmp["tipoRelacion"]=$tipoRelacion;
                $evidenciaEntidadDestino=$row[5];
                $arrayAsociativoTmp["evidenciaEntidadDestino"]=$evidenciaEntidadDestino;
                $username=$row[6];
                $arrayAsociativoTmp["username"]=$username;

                $arrayResults[$id]=$arrayAsociativoTmp;
                //array_push($arrayResults, $arrayAsociativoTmp);

            }

        //We repeat this process to get also the relations added/modified when the evidenciaEntidadDestino es la entidad que queremos... En el caso de que ya estén añadidos porque el evidenciaEntidadOrigen sea el, como se sobreescribirán los datos, no se duplicarán...


            //ld($arrayResults);
            /* liberar el resultset */
            $result->free();
        }
        //ld($arrayResults);

        $selectSQL2="
            SELECT ru.id, ru.created, ee1.evidencia_id, ee1.textminingName, tr.tipo, ee2.textminingName, us.username
            FROM RelacionUsuario AS ru, Relacion AS r, EvidenciaEntidad AS ee1, EvidenciaEntidad AS ee2, TipoRelacion AS tr, fos_user AS us
            WHERE ru.relacion_id = r.id
            AND r.evidenciaEntidadOrigen_id = ee1.id
            AND r.evidenciaEntidadDestino_id = ee2.id
            AND r.tipoRelacion_id = tr.id
            AND ru.user_id = us.id
            AND ee2.textminingName = \"$entity\"
            ";
        //ld($selectSQL2);
        if ($result2 = $mysqli->query($selectSQL2)) {
            /* obtener array asociativo */
            while ($row2 = $result2->fetch_row()) {
                $id=$row2[0];
                $arrayAsociativoTmp=array();
                $date=$row2[1];
                $arrayAsociativoTmp["date"]=$date;
                $idEvidencia=$row2[2];
                $arrayAsociativoTmp["idEvidencia"]=$idEvidencia;
                $evidenciaEntidadOrigen=$row2[3];
                $arrayAsociativoTmp["evidenciaEntidadOrigen"]=$evidenciaEntidadOrigen;
                $tipoRelacion=$row2[4];
                $arrayAsociativoTmp["tipoRelacion"]=$tipoRelacion;
                $evidenciaEntidadDestino=$row2[5];
                $arrayAsociativoTmp["evidenciaEntidadDestino"]=$evidenciaEntidadDestino;
                $username=$row2[6];
                $arrayAsociativoTmp["username"]=$username;

                $arrayResults[$id]=$arrayAsociativoTmp;
                //array_push($arrayResults, $arrayAsociativoTmp);

            }
        }
        //ldd($arrayResults);
        ksort($arrayResults);
        //ldd($arrayResults);
        return($arrayResults);
    }

    public function getChangesByEntityDates ($entity, $startDate, $endDate)
    {
        $alert="llega aqui";
        //ld($entity);
        $arrayStartDate=explode("-",$startDate);
        $startDate="$arrayStartDate[2]-$arrayStartDate[1]-$arrayStartDate[0]";
        $arrayEndDate=explode("-",$endDate);
        $endDate="$arrayEndDate[2]-$arrayEndDate[1]-$arrayEndDate[0]";
        /*$em = $this->getEntityManager();
        $consulta = $em->createQuery('
            SELECT ru, r
            FROM RelacionUsuarioBundle:RelacionUsuario ru, RelacionBundle:Relacion r
        ');
        //WHERE tr.tipo = :tipoRelacion
        //$consulta->setParameter('username', $username);
        $data=$consulta->getResult();
        ldd($data[0]->getRelacion()->getEvidenciaEntidadOrigen());
        return($data);
        */
        $em = $this->getEntityManager();
        $connection=$em->getConnection();
        $user_db = $connection->getUsername();
        $password = $connection->getPassword();
        $host = $connection->getHost();
        $database=$connection->getDatabase();

        $mysqli = new \mysqli($host, $user_db, $password, $database);



        /* check connection */

        if ($mysqli->connect_errno) {
            $alert="Connect failed: %s\n".$mysqli->connect_error;
            ldd($alert);
            exit();
        }
        $selectSQL="
            SELECT ru.id, ru.created, ee1.evidencia_id, ee1.textminingName, tr.tipo, ee2.textminingName, us.username
            FROM RelacionUsuario AS ru, Relacion AS r, EvidenciaEntidad AS ee1, EvidenciaEntidad AS ee2, TipoRelacion AS tr, fos_user AS us
            WHERE ru.relacion_id = r.id
            AND r.evidenciaEntidadOrigen_id = ee1.id
            AND r.evidenciaEntidadDestino_id = ee2.id
            AND r.tipoRelacion_id = tr.id
            AND ru.user_id = us.id
            AND ee1.textminingName = \"$entity\"
            AND ru.created BETWEEN \"$startDate\" AND \"$endDate\"
            ";
        //ld($selectSQL);
        $arrayResults=array();
        /* Select queries return a resultset */
        if ($result = $mysqli->query($selectSQL)) {
            /* obtener array asociativo */
            while ($row = $result->fetch_row()) {
                $id=$row[0];
                $arrayAsociativoTmp=array();
                $date=$row[1];
                $arrayAsociativoTmp["date"]=$date;
                $idEvidencia=$row[2];
                $arrayAsociativoTmp["idEvidencia"]=$idEvidencia;
                $evidenciaEntidadOrigen=$row[3];
                $arrayAsociativoTmp["evidenciaEntidadOrigen"]=$evidenciaEntidadOrigen;
                $tipoRelacion=$row[4];
                $arrayAsociativoTmp["tipoRelacion"]=$tipoRelacion;
                $evidenciaEntidadDestino=$row[5];
                $arrayAsociativoTmp["evidenciaEntidadDestino"]=$evidenciaEntidadDestino;
                $username=$row[6];
                $arrayAsociativoTmp["username"]=$username;

                $arrayResults[$id]=$arrayAsociativoTmp;
                //array_push($arrayResults, $arrayAsociativoTmp);

            }

        //We repeat this process to get also the relations added/modified when the evidenciaEntidadDestino es la entidad que queremos... En el caso de que ya estén añadidos porque el evidenciaEntidadOrigen sea el, como se sobreescribirán los datos, no se duplicarán...


            //ld($arrayResults);
            /* liberar el resultset */
            $result->free();
        }
        //ld($arrayResults);

        $selectSQL2="
            SELECT ru.id, ru.created, ee1.evidencia_id, ee1.textminingName, tr.tipo, ee2.textminingName, us.username
            FROM RelacionUsuario AS ru, Relacion AS r, EvidenciaEntidad AS ee1, EvidenciaEntidad AS ee2, TipoRelacion AS tr, fos_user AS us
            WHERE ru.relacion_id = r.id
            AND r.evidenciaEntidadOrigen_id = ee1.id
            AND r.evidenciaEntidadDestino_id = ee2.id
            AND r.tipoRelacion_id = tr.id
            AND ru.user_id = us.id
            AND ee2.textminingName = \"$entity\"
            AND ru.created BETWEEN \"$startDate\" AND \"$endDate\"
            ";
        //ld($selectSQL2);
        if ($result2 = $mysqli->query($selectSQL2)) {
            /* obtener array asociativo */
            while ($row2 = $result2->fetch_row()) {
                $id=$row2[0];
                $arrayAsociativoTmp=array();
                $date=$row2[1];
                $arrayAsociativoTmp["date"]=$date;
                $idEvidencia=$row2[2];
                $arrayAsociativoTmp["idEvidencia"]=$idEvidencia;
                $evidenciaEntidadOrigen=$row2[3];
                $arrayAsociativoTmp["evidenciaEntidadOrigen"]=$evidenciaEntidadOrigen;
                $tipoRelacion=$row2[4];
                $arrayAsociativoTmp["tipoRelacion"]=$tipoRelacion;
                $evidenciaEntidadDestino=$row2[5];
                $arrayAsociativoTmp["evidenciaEntidadDestino"]=$evidenciaEntidadDestino;
                $username=$row2[6];
                $arrayAsociativoTmp["username"]=$username;

                $arrayResults[$id]=$arrayAsociativoTmp;
                //array_push($arrayResults, $arrayAsociativoTmp);

            }
        }
        //ldd($arrayResults);
        ksort($arrayResults);
        //ldd($arrayResults);
        return($arrayResults);
    }

    public function getChangesByEvidence ($evidence)
    {
        $alert="llega aqui";
        //ldd($alert);
        /*$em = $this->getEntityManager();
        $consulta = $em->createQuery('
            SELECT ru, r
            FROM RelacionUsuarioBundle:RelacionUsuario ru, RelacionBundle:Relacion r
        ');
        //WHERE tr.tipo = :tipoRelacion
        //$consulta->setParameter('username', $username);
        $data=$consulta->getResult();
        ldd($data[0]->getRelacion()->getEvidenciaEntidadOrigen());
        return($data);
        */
        $em = $this->getEntityManager();
        $connection=$em->getConnection();
        $user_db = $connection->getUsername();
        $password = $connection->getPassword();
        $host = $connection->getHost();
        $database=$connection->getDatabase();

        $mysqli = new \mysqli($host, $user_db, $password, $database);



        /* check connection */

        if ($mysqli->connect_errno) {
            $alert="Connect failed: %s\n".$mysqli->connect_error;
            ldd($alert);
            exit();
        }
        $selectSQL="
            SELECT ru.id, ru.created, ee1.evidencia_id, ee1.textminingName, tr.tipo, ee2.textminingName, us.username
            FROM RelacionUsuario AS ru, Relacion AS r, EvidenciaEntidad AS ee1, EvidenciaEntidad AS ee2, TipoRelacion AS tr, fos_user AS us
            WHERE ru.relacion_id = r.id
            AND r.evidenciaEntidadOrigen_id = ee1.id
            AND r.evidenciaEntidadDestino_id = ee2.id
            AND r.tipoRelacion_id = tr.id
            AND ru.user_id = us.id
            AND ee1.evidencia_id = $evidence
            ";
        $arrayResults=array();
        /* Select queries return a resultset */
        if ($result = $mysqli->query($selectSQL)) {
            /* obtener array asociativo */
            while ($row = $result->fetch_row()) {
                $id=$row[0];
                $arrayAsociativoTmp=array();
                $date=$row[1];
                $arrayAsociativoTmp["date"]=$date;
                $idEvidencia=$row[2];
                $arrayAsociativoTmp["idEvidencia"]=$idEvidencia;
                $evidenciaEntidadOrigen=$row[3];
                $arrayAsociativoTmp["evidenciaEntidadOrigen"]=$evidenciaEntidadOrigen;
                $tipoRelacion=$row[4];
                $arrayAsociativoTmp["tipoRelacion"]=$tipoRelacion;
                $evidenciaEntidadDestino=$row[5];
                $arrayAsociativoTmp["evidenciaEntidadDestino"]=$evidenciaEntidadDestino;
                $username=$row[6];
                $arrayAsociativoTmp["username"]=$username;

                $arrayResults[$id]=$arrayAsociativoTmp;
                //array_push($arrayResults, $arrayAsociativoTmp);

            }

        //We repeat this process to get also the relations added/modified when the evidenciaEntidadDestino es la entidad que queremos... En el caso de que ya estén añadidos porque el evidenciaEntidadOrigen sea el, como se sobreescribirán los datos, no se duplicarán...


            //ld($arrayResults);
            /* liberar el resultset */
            $result->free();
        }
        //ld($arrayResults);

        $selectSQL2="
            SELECT ru.id, ru.created, ee1.evidencia_id, ee1.textminingName, tr.tipo, ee2.textminingName, us.username
            FROM RelacionUsuario AS ru, Relacion AS r, EvidenciaEntidad AS ee1, EvidenciaEntidad AS ee2, TipoRelacion AS tr, fos_user AS us
            WHERE ru.relacion_id = r.id
            AND r.evidenciaEntidadOrigen_id = ee1.id
            AND r.evidenciaEntidadDestino_id = ee2.id
            AND r.tipoRelacion_id = tr.id
            AND ru.user_id = us.id
            AND ee2.evidencia_id = $evidence
            ";
        //ld($selectSQL2);
        if ($result2 = $mysqli->query($selectSQL2)) {
            /* obtener array asociativo */
            while ($row2 = $result2->fetch_row()) {
                $id=$row2[0];
                $arrayAsociativoTmp=array();
                $date=$row2[1];
                $arrayAsociativoTmp["date"]=$date;
                $idEvidencia=$row2[2];
                $arrayAsociativoTmp["idEvidencia"]=$idEvidencia;
                $evidenciaEntidadOrigen=$row2[3];
                $arrayAsociativoTmp["evidenciaEntidadOrigen"]=$evidenciaEntidadOrigen;
                $tipoRelacion=$row2[4];
                $arrayAsociativoTmp["tipoRelacion"]=$tipoRelacion;
                $evidenciaEntidadDestino=$row2[5];
                $arrayAsociativoTmp["evidenciaEntidadDestino"]=$evidenciaEntidadDestino;
                $username=$row2[6];
                $arrayAsociativoTmp["username"]=$username;

                $arrayResults[$id]=$arrayAsociativoTmp;
                //array_push($arrayResults, $arrayAsociativoTmp);

            }
        }
        //ldd($arrayResults);
        ksort($arrayResults);
        //ldd($arrayResults);
        return($arrayResults);
    }

    public function getChangesByEvidenceDates ($evidence, $startDate, $endDate)
    {
        $alert="llega aqui";
        //ld($entity);
        $arrayStartDate=explode("-",$startDate);
        $startDate="$arrayStartDate[2]-$arrayStartDate[1]-$arrayStartDate[0]";
        $arrayEndDate=explode("-",$endDate);
        $endDate="$arrayEndDate[2]-$arrayEndDate[1]-$arrayEndDate[0]";
        /*$em = $this->getEntityManager();
        $consulta = $em->createQuery('
            SELECT ru, r
            FROM RelacionUsuarioBundle:RelacionUsuario ru, RelacionBundle:Relacion r
        ');
        //WHERE tr.tipo = :tipoRelacion
        //$consulta->setParameter('username', $username);
        $data=$consulta->getResult();
        ldd($data[0]->getRelacion()->getEvidenciaEntidadOrigen());
        return($data);
        */
        $em = $this->getEntityManager();
        $connection=$em->getConnection();
        $user_db = $connection->getUsername();
        $password = $connection->getPassword();
        $host = $connection->getHost();
        $database=$connection->getDatabase();

        $mysqli = new \mysqli($host, $user_db, $password, $database);



        /* check connection */

        if ($mysqli->connect_errno) {
            $alert="Connect failed: %s\n".$mysqli->connect_error;
            ldd($alert);
            exit();
        }
        $selectSQL="
            SELECT ru.id, ru.created, ee1.evidencia_id, ee1.textminingName, tr.tipo, ee2.textminingName, us.username
            FROM RelacionUsuario AS ru, Relacion AS r, EvidenciaEntidad AS ee1, EvidenciaEntidad AS ee2, TipoRelacion AS tr, fos_user AS us
            WHERE ru.relacion_id = r.id
            AND r.evidenciaEntidadOrigen_id = ee1.id
            AND r.evidenciaEntidadDestino_id = ee2.id
            AND r.tipoRelacion_id = tr.id
            AND ru.user_id = us.id
            AND ee1.evidencia_id = $evidence
            AND ru.created BETWEEN \"$startDate\" AND \"$endDate\"
            ";
        //ldd($selectSQL);
        $arrayResults=array();
        /* Select queries return a resultset */
        if ($result = $mysqli->query($selectSQL)) {
            /* obtener array asociativo */
            while ($row = $result->fetch_row()) {
                $id=$row[0];
                $arrayAsociativoTmp=array();
                $date=$row[1];
                $arrayAsociativoTmp["date"]=$date;
                $idEvidencia=$row[2];
                $arrayAsociativoTmp["idEvidencia"]=$idEvidencia;
                $evidenciaEntidadOrigen=$row[3];
                $arrayAsociativoTmp["evidenciaEntidadOrigen"]=$evidenciaEntidadOrigen;
                $tipoRelacion=$row[4];
                $arrayAsociativoTmp["tipoRelacion"]=$tipoRelacion;
                $evidenciaEntidadDestino=$row[5];
                $arrayAsociativoTmp["evidenciaEntidadDestino"]=$evidenciaEntidadDestino;
                $username=$row[6];
                $arrayAsociativoTmp["username"]=$username;

                $arrayResults[$id]=$arrayAsociativoTmp;
                //array_push($arrayResults, $arrayAsociativoTmp);

            }

        //We repeat this process to get also the relations added/modified when the evidenciaEntidadDestino es la entidad que queremos... En el caso de que ya estén añadidos porque el evidenciaEntidadOrigen sea el, como se sobreescribirán los datos, no se duplicarán...


            //ld($arrayResults);
            /* liberar el resultset */
            $result->free();
        }
        //ld($arrayResults);

        $selectSQL2="
            SELECT ru.id, ru.created, ee1.evidencia_id, ee1.textminingName, tr.tipo, ee2.textminingName, us.username
            FROM RelacionUsuario AS ru, Relacion AS r, EvidenciaEntidad AS ee1, EvidenciaEntidad AS ee2, TipoRelacion AS tr, fos_user AS us
            WHERE ru.relacion_id = r.id
            AND r.evidenciaEntidadOrigen_id = ee1.id
            AND r.evidenciaEntidadDestino_id = ee2.id
            AND r.tipoRelacion_id = tr.id
            AND ru.user_id = us.id
            AND ee2.evidencia_id = $evidence
            AND ru.created BETWEEN \"$startDate\" AND \"$endDate\"
            ";
        //ld($selectSQL2);
        if ($result2 = $mysqli->query($selectSQL2)) {
            /* obtener array asociativo */
            while ($row2 = $result2->fetch_row()) {
                $id=$row2[0];
                $arrayAsociativoTmp=array();
                $date=$row2[1];
                $arrayAsociativoTmp["date"]=$date;
                $idEvidencia=$row2[2];
                $arrayAsociativoTmp["idEvidencia"]=$idEvidencia;
                $evidenciaEntidadOrigen=$row2[3];
                $arrayAsociativoTmp["evidenciaEntidadOrigen"]=$evidenciaEntidadOrigen;
                $tipoRelacion=$row2[4];
                $arrayAsociativoTmp["tipoRelacion"]=$tipoRelacion;
                $evidenciaEntidadDestino=$row2[5];
                $arrayAsociativoTmp["evidenciaEntidadDestino"]=$evidenciaEntidadDestino;
                $username=$row2[6];
                $arrayAsociativoTmp["username"]=$username;

                $arrayResults[$id]=$arrayAsociativoTmp;
                //array_push($arrayResults, $arrayAsociativoTmp);

            }
        }
        //ldd($arrayResults);
        ksort($arrayResults);
        //ldd($arrayResults);
        return($arrayResults);
    }
}
