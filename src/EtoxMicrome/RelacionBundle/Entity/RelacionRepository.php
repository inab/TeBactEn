<?php

namespace EtoxMicrome\RelacionBundle\Entity;

use Doctrine\ORM\EntityRepository;
use EtoxMicrome\RelacionUsuarioBundle\Entity\RelacionUsuario;

/**
 * RelacionRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class RelacionRepository extends EntityRepository
{
    public function anadirModificarRelacion($evidenciaEntidadOrigen_id, $evidenciaEntidadDestino_id, $tipoRelacion_id, $user_id)
    {
        $alert="llega aqui";
        $alert2="conexion a base de datos OK";
        $entraEnInsert="Entra en insertar nueva relacion";
        $entraEnUpdate="Entra en actualizar relacion existente";
        $em = $this->getEntityManager();
        $connection=$em->getConnection();
        $user_db = $connection->getUsername();
        $password = $connection->getPassword();
        $host = $connection->getHost();
        $database=$connection->getDatabase();

        $mysqli = new \mysqli($host, $user_db, $password, $database);



        /* check connection */

        if ($mysqli->connect_errno) {
            $alert="Connect failed: %s\n".$mysqli->connect_error;
            ldd($alert);
            exit();
        }
        $selectSQL="select * from Relacion where evidenciaEntidadOrigen_id=$evidenciaEntidadOrigen_id and evidenciaEntidadDestino_id=$evidenciaEntidadDestino_id";
        /* Select queries return a resultset */

        if ($result = $mysqli->query($selectSQL)) {
            $created=new \DateTime('now');
            $created = $created->format('Y-m-d H:i:s');
            $updated=new \DateTime('now');
            $updated = $updated->format('Y-m-d H:i:s');

            $num_rows=$result->num_rows;
            //ld($num_rows);
            if($num_rows==0){
                //No existe la relación, se crea una nueva
                //ld($entraEnInsert);
                $insertSQL="insert into Relacion (created, updated, tipoRelacion_id, evidenciaEntidadOrigen_id, evidenciaEntidadDestino_id) values('$created', '$updated', $tipoRelacion_id, $evidenciaEntidadOrigen_id, $evidenciaEntidadDestino_id)";
                $mysqli->query($insertSQL);
                $relacion_id=$mysqli->insert_id;
                //ld($relacion_id);
            }
            elseif($num_rows==1){
                //Ya existe un valor para la relación así actualizamos el valor que hay. Da igual que el valor no se modifique ya que con esto se actualizará el valor del updated, ojo no modificamos el created...
                $row = $result->fetch_array(MYSQLI_ASSOC);
                //ld($entraEnUpdate);
                $updateSQL="update Relacion set tipoRelacion_id=$tipoRelacion_id, updated='$updated' where evidenciaEntidadOrigen_id=$evidenciaEntidadOrigen_id and evidenciaEntidadDestino_id=$evidenciaEntidadDestino_id";
                $mysqli->query($updateSQL);

                //Este esta mal....$selectMax="SELECT MAX(id) FROM Relacion"; Es esto:
                $selectUpdated_id="select id from Relacion where evidenciaEntidadOrigen_id=$evidenciaEntidadOrigen_id and evidenciaEntidadDestino_id=$evidenciaEntidadDestino_id";
                $result2 = $mysqli->query($selectUpdated_id)->fetch_assoc();
                $relacion_id=(int)$result2["id"];
            }


            $result->close();
            //ld($relacion_id);
        }
        //Ya hemos insertado una nueva relacion o actualizado una existente. Ahora guardamos en la tabla RelacionUsuario una entrada que deje constancia del usuario que ha hecho esta insercion/modificación. Para ello hacemos:
        $insertSQL="insert into RelacionUsuario (created, updated, relacion_id, user_id) values('$created', '$updated', $relacion_id, $user_id)";
        $mysqli->query($insertSQL);
    }

    public function getObjetoRelacion($idOrigen, $idDestino)
    {
        $alert="Llega aqui";
        $em = $this->getEntityManager();
        $consulta = $em->createQuery('
            SELECT r
            FROM RelacionBundle:Relacion r
            WHERE r.evidenciaEntidadOrigen = :idOrigen
            AND r.evidenciaEntidadDestino = :idDestino
        ');
        $consulta->setParameter('idOrigen', $idOrigen);
        $consulta->setParameter('idDestino', $idDestino);

        $arrayRelacion=$consulta->getResult();
        if (count($arrayRelacion)==0){
            $tipoRelacion_id=0;
            $tipoRelacion="";
        }else{
            $relacion=$arrayRelacion[0];
            $tipoRelacion_id=$relacion->getTipoRelacion()->getId();
            $tipoRelacion=$relacion->getTipoRelacion()->getTipo();
        }
        $stringRelacion=$tipoRelacion_id."|".$tipoRelacion;
        return $stringRelacion;
    }

    public function crearTablaRelaciones($entity)
    {
        $alert="Llega aqui";
        $arrayRelaciones=array();
        $em = $this->getEntityManager();
        $arrayEvidenciaEntidades=$entity->getEvidenciaEntidad()->getValues();
        $arrayEvidenciaEntidades2=$arrayEvidenciaEntidades;
        //Tenemos el array con las EvidenciasEntidades que forman parte de la evidencia. Tenemos que recorrer el array y generar otro array que contenga los valores para llenar la tabla más adelante. Para ello hacemos:
        foreach($arrayEvidenciaEntidades as $evidenciaEntidad){
            $idOrigen = $evidenciaEntidad->getId();
            foreach($arrayEvidenciaEntidades2 as $evidenciaEntidad2){
                $idDestino = $evidenciaEntidad2->getId();
                //Tenemos el idOrigen y el idDestino. Obtenemos el objeto relacion en el caso de que exista.

                $stringRelacion=$em->getRepository('RelacionBundle:Relacion')->getObjetoRelacion($idOrigen, $idDestino);
                $arrayRelaciones[$idOrigen][$idDestino]=$stringRelacion;
            }
        }
        return($arrayRelaciones);
    }
}
