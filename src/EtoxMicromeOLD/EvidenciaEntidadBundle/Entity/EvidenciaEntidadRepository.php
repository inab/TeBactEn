<?php

namespace EtoxMicrome\EvidenciaEntidadBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * EvidenciaEntidadRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class EvidenciaEntidadRepository extends EntityRepository
{
    public function queryEvidenciasParaOrganismo($organismo)
    {
        $em = $this->getEntityManager();
        $consulta = $em->createQuery('
            SELECT e
            FROM EvidenciaEntidadBundle:EvidenciaEntidad e
            WHERE e.entidad = :organismo
        ');
        $consulta->setParameter('organismo', $organismo);
        return $consulta;
    }

    public function queryEvidenciasParaEnzima($enzima)
    {
        $em = $this->getEntityManager();
        $consulta = $em->createQuery('
            SELECT e
            FROM EvidenciaEntidadBundle:EvidenciaEntidad e
            WHERE e.entidad = :enzima
        ');
        $consulta->setParameter('enzima', $enzima);
        return $consulta;
    }

    public function queryEvidenciasParaCompuesto($compuesto)
    {
        $em = $this->getEntityManager();
        $consulta = $em->createQuery('
            SELECT e
            FROM EvidenciaEntidadBundle:EvidenciaEntidad e
            WHERE e.entidad = :compuesto
        ');
        $consulta->setParameter('compuesto', $compuesto);
        return $consulta;
    }

    public function findEvidenciasEntidadesOfIdEvidencia($id_evidencia)
    {
        $em = $this->getEntityManager();
        $consulta = $em->createQuery('
            SELECT e
            FROM EvidenciaEntidadBundle:EvidenciaEntidad e
            WHERE e.evidencia = :id_evidencia
        ');
        $consulta->setParameter('id_evidencia', $id_evidencia);
        return $consulta->execute();
    }

    public function deleteEvidenciaEntidad($id_evidenciaEntidad)
    {
        $em = $this->getEntityManager();
        $consulta = $em->createQuery('
            DELETE EvidenciaEntidadBundle:EvidenciaEntidad e
            WHERE e.id = :id_evidenciaEntidad
        ');
        $consulta->setParameter('id_evidenciaEntidad', $id_evidenciaEntidad);
        return $consulta->execute();

    }

    public function queryEvidenciasAdvanceSearch($entidad,$arrayParameters){


        $alert="Llega aqui";
        $arrayEntidades=array();

        $contadorEntidades=(count($arrayParameters))+1;

        //ld($contadorEntidades);

        array_push($arrayEntidades, $entidad);
        foreach($arrayParameters as $parameters){
            $entidad=$parameters[1];
            array_push($arrayEntidades,$entidad);
        }

        //ld($arrayEntidades);
        $em = $this->getEntityManager();
        $connection = $em->getConnection();
        //ld($arrayParameters);

        //Ejecutamos una busqueda según cada uno de los parámetros y guardamos la intersección de los resultados iterativamente en un array de objetos EvidenciaEntidad
        //Empezamos por la specie porque ya la tenemos
        //OJO, para realizar estas consultas necesitaremos sql normal ya que sino se va de memoria...
        $user = $connection->getUsername();
        $password = $connection->getPassword();
        $host = $connection->getHost();
        $database=$connection->getDatabase();
        $conn = mysql_connect ($host, $user, $password);
        mysql_select_db($database, $conn);
        mysql_query("SET NAMES 'utf8'");

        $arrayEvidenciasCumplen=array();

        foreach ($arrayEntidades as $entidadName){
            //ld($entidadName);
            $consulta = $em->createQuery("
                SELECT e
                FROM EntidadBundle:Entidad e
                WHERE e.nombre = :entidadName
            ");
            $consulta->setParameter('entidadName',$entidadName);
            $entidades=$consulta->getResult();
            $arrayEvidenciasCumplen[$entidadName]=array();
            foreach($entidades as $entidad){
                $entidad_id=$entidad->getId();
                //ld($entidad_id);
                $selectSQL="SELECT evidencia_id FROM EvidenciaEntidad where  entidad_id=$entidad_id";
                #print $selectSQL;
                $result= mysql_query($selectSQL);

                while ($row = mysql_fetch_row($result)){
                	#$idEnzyme=$row[0];
                	$evidencia_id=(int)$row[0];
                	array_push($arrayEvidenciasCumplen[$entidadName], $evidencia_id);
                }
            }
            //ld($arrayEvidenciasCumplen);

        }
        mysql_close();
        //ld($arrayEvidenciasCumplen);
        $arrayValues=array();
        $contador=0;
        foreach($arrayEvidenciasCumplen as $arrayEvidencias){
            $arrayValues[$contador]=array_values($arrayEvidencias);
            $contador=$contador+1;
        }
        //ld($arrayValues);

        $firstRound=true;

        for($i=0;$i<$contadorEntidades-1;$i++){
            //ld($arrayValues[$i]);
            if($firstRound){
                $arrayIntersect=array_intersect($arrayValues[$i],$arrayValues[$i+1]);
                $firstRound=false;
            }
            else{
                //Tenemos en cuenta también el arrayIntersect
                $arrayIntersect=array_intersect($arrayValues[$i],$arrayValues[$i+1], $arrayIntersect);
            }

            //Recorremos cada elemento del array
        }
        //ld($arrayIntersect);
        return(array_values($arrayIntersect));


    }

    public function queryEvidenciasEntidadesFromEvidencias($arrayEvidencias){

        //funcion que recibe un arrayEvidencias y devuelve un array con objetos EvidenciaEntidad que contienen esa Evidencia!!
        $arrayObjetos=array();
        $em = $this->getEntityManager();
        foreach($arrayEvidencias as $evidencia){
            $consulta = $em->createQuery('
                SELECT e
                FROM EvidenciaEntidadBundle:EvidenciaEntidad e
                WHERE e.evidencia = :evidencia
            ');
            $consulta->setParameter('evidencia', $evidencia);
            $evidenciasEntidades=$consulta->getResult();
            return($evidenciasEntidades);
        }


    }
    /*public function getEvidenciasParaEntidadCuratedNumber($id_entidad, $numberCurated)
    {
        $em = $this->getEntityManager();
        $consulta = $em->createQuery('
            SELECT e, v
            FROM EvidenciaEntidadBundle:EvidenciaEntidad e
            JOIN e.evidencia v
            WHERE e.entidad = :id_entidad AND v.curated= :numberCurated
            ORDER BY v.id
        ');
        $consulta->setParameter('numberCurated', $numberCurated);
        $consulta->setParameter('id_entidad', $id_entidad);
        return $consulta->getResult();
    }*/

    public function getEvidenciasParaEntidadCuratedNumber($id_entidad, $numberCurated, $connection)
    {

        //OJO!! utilizamos una query SQL, no ODL, porque no queremos retornar los objetos sino únicamente los ids de las evidencias que tienen un número determinado de curated. Evitando así el maximum memory allowed size
        $user = $connection->getUsername();
        $password = $connection->getPassword();
        $host = $connection->getHost();
        $database=$connection->getDatabase();
        $conn = mysql_connect ($host, $user, $password);
        mysql_select_db($database, $conn);
        mysql_query("SET NAMES 'utf8'");
        $selectSQL="SELECT ee.evidencia_id FROM EvidenciaEntidad ee INNER JOIN Evidencia ev ON ee.evidencia_id = ev.id where  ee.entidad_id=$id_entidad and curated=$numberCurated ORDER BY 1 limit 15";
        #print $selectSQL;
        $result= mysql_query($selectSQL);
        $arr=array();
        while ($row = mysql_fetch_row($result)){
        	#$idEnzyme=$row[0];
        	$evidencia_id=(int)$row[0];
        	$arr[]=$evidencia_id;
        }

        $selectSQL="SELECT COUNT(*) AS total FROM EvidenciaEntidad ee INNER JOIN Evidencia ev ON ee.evidencia_id = ev.id where  ee.entidad_id=$id_entidad and curated=$numberCurated";
        $result= mysql_query($selectSQL);
        $data=mysql_fetch_assoc($result);
        $total=$data['total'];
        return array($arr, $total);

        //$jsonString = json_encode($arr);
        //print $jsonString;
        //exit();
    }

}
